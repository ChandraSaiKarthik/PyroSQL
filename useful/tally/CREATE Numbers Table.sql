CREATE OR ALTER PROCEDURE dbo.Numbers_Create
AS

DROP TABLE IF EXISTS dbo.Numbers

CREATE TABLE dbo.Numbers(n BIGINT)

;WITH e1(n) AS
(
	SELECT 1 UNION ALL SELECT 1 UNION ALL SELECT 1 UNION ALL 
	SELECT 1 UNION ALL SELECT 1 UNION ALL SELECT 1 UNION ALL 
	SELECT 1 UNION ALL SELECT 1 UNION ALL SELECT 1 UNION ALL SELECT 1
)														-- 10
	,e2(n) AS (SELECT 1 FROM e1 CROSS JOIN e1 AS b)		-- 10*10
	,e3(n) AS (SELECT 1 FROM e1 CROSS JOIN e2 AS c)		-- 10*100
	,e4(n) AS (SELECT 1 FROM e1 CROSS JOIN e3 AS d)		-- 10*1000
	,e5(n) AS (SELECT 1 FROM e1 CROSS JOIN e4 AS e)		-- 10*10000
	--,e6(n) AS (SELECT 1 FROM e1 CROSS JOIN e5 AS e)		-- 10*100000
INSERT  INTO 
	dbo.Numbers(n)
SELECT 
	n = ROW_NUMBER() OVER (ORDER BY n)  - 1
FROM 
	e5
ORDER BY 
	n

CREATE UNIQUE CLUSTERED INDEX 
	ucix_Numbers_n
ON 
	dbo.Numbers(n) 
WITH 
	(DATA_COMPRESSION = PAGE);





;WITH n(n) AS
(
	SELECT 1
	UNION ALL
	SELECT n+1 FROM n WHERE n < 1000000
)
SELECT n FROM n ORDER BY n
OPTION (MAXRECURSION 0);/* 
FINAL LISTING 
Source	Row counts
SQL Server 2008 R2	SQL Server 2012	SQL Server 2014
master..spt_values
2,508 2,515	2,519
master..spt_values CROSS JOIN master..spt_values
6,290,064	6,325,225	6,345,361
sys.all_objects
1,990	2,089	2,165
sys.all_columns
5,157	7,276	8,560
sys.all_objects CROSS JOIN sys.all_objects
3,960,100	4,363,921	4,687,225
sys.all_objects CROSS JOIN sys.all_columns
10,262,430	15,199,564	18,532,400
sys.all_columns CROSS JOIN sys.all_columns
26,594,649	52,940,176	73,273,600
*/


-- EMILY CTE 
DECLARE @low INT = 0
	DECLARE @high INT = 10000

	DROP TABLE IF EXISTS [PERFMASTER].[Numbers]

	CREATE TABLE [PERFMASTER].[Numbers] (n INT)

	-- STACKED CTE
	
	
	;WITH e1(n) AS
	(
		SELECT 1 UNION ALL SELECT 1 UNION ALL SELECT 1 UNION ALL 
		SELECT 1 UNION ALL SELECT 1 UNION ALL SELECT 1 UNION ALL 
		SELECT 1 UNION ALL SELECT 1 UNION ALL SELECT 1 UNION ALL 
		SELECT 1 -- 10 
	),
	main AS
	(
		SELECT e1.n
		FROM e1
		CROSS JOIN (SELECT 1 FROM e1) AS e2(n) -- 100 (10^2)
		CROSS JOIN (SELECT 1 FROM e1) AS e3(n) -- 1000 (10^3)
		CROSS JOIN (SELECT 1 FROM e1) AS e4(n) -- 10000 (10^4)
		CROSS JOIN (SELECT 1 FROM e1) AS e5(n) -- 100000 (10^5) 
		CROSS JOIN (SELECT 1 FROM e1) AS e6(n) -- 1000000 (10^6) 
        CROSS JOIN (SELECT 1 FROM e1) AS e6(n) -- 10000000 (10^7) 
        CROSS JOIN (SELECT 1 FROM e1) AS e6(n) -- 100000000 (10^8) 
        CROSS JOIN (SELECT 1 FROM e1) AS e6(n) -- 1000000000 (10^9) 
	)
	INSERT INTO [PERFMASTER].[Numbers](n)
	SELECT n 
	FROM main 
	WHERE n BETWEEN @low and @high;




-- STACKED CTE
;WITH e1(n) AS
(
    SELECT 1 UNION ALL SELECT 1 UNION ALL SELECT 1 UNION ALL 
    SELECT 1 UNION ALL SELECT 1 UNION ALL SELECT 1 UNION ALL 
    SELECT 1 UNION ALL SELECT 1 UNION ALL SELECT 1 UNION ALL SELECT 1
), -- 10
e2(n) AS (SELECT 1 FROM e1 CROSS JOIN e1 AS b), -- 10*10
e3(n) AS (SELECT 1 FROM e2 CROSS JOIN e2 AS b), -- 100*100
e4(n) AS (SELECT 1 FROM e3 CROSS JOIN (SELECT TOP 5 n FROM e1) AS b)  -- 5*10000
  SELECT n = ROW_NUMBER() OVER (ORDER BY n) FROM e4 ORDER BY n;


  DECLARE @low INT = 0
	DECLARE @high INT = 10000

	DROP TABLE IF EXISTS PERFTEST.Numbers

	CREATE TABLE PERFTEST.Numbers (n INT)

  ;WITH
    L0   AS (SELECT c FROM (SELECT 1 UNION ALL SELECT 1) AS D(c)),
    L1   AS (SELECT 1 AS c FROM L0 AS A CROSS JOIN L0 AS B),
    L2   AS (SELECT 1 AS c FROM L1 AS A CROSS JOIN L1 AS B),
    L3   AS (SELECT 1 AS c FROM L2 AS A CROSS JOIN L2 AS B),
    L4   AS (SELECT 1 AS c FROM L3 AS A CROSS JOIN L3 AS B),
    L5   AS (SELECT 1 AS c FROM L4 AS A CROSS JOIN L4 AS B),
    Nums AS (SELECT ROW_NUMBER() OVER(ORDER BY (SELECT NULL)) AS rownum
             FROM L5)
  INSERT INTO PERFTEST.Numbers
  SELECT TOP(@high - @low + 1) @low + rownum - 1 AS n
  FROM Nums
  ORDER BY rownum;

  SELECT n = ROW_NUMBER() OVER (ORDER BY n) FROM e4 ORDER BY n;


-- Resursive CTE
;WITH n(n) AS
(
    SELECT 1
    UNION ALL
    SELECT n+1 FROM n WHERE n < 1000000
)
SELECT n FROM n ORDER BY n
OPTION (MAXRECURSION 0);

-- sys.allobjects
;WITH x AS 
(
  SELECT TOP (1000) [object_id] FROM sys.all_objects
)
SELECT n = ROW_NUMBER() OVER (ORDER BY x.[object_id]) 
FROM x CROSS JOIN x AS y ORDER BY n;

-- spt value
;WITH x AS 
(
  SELECT TOP (1000) number FROM [master]..spt_values
)
SELECT n = ROW_NUMBER() OVER (ORDER BY x.number) 
FROM x CROSS JOIN x AS y ORDER BY n;



CREATE PROCEDURE PERFTEST.sp_Create_Numbers
AS

	DECLARE @low INT = 0
	DECLARE @high INT = 1000000

	DROP TABLE IF EXISTS PERFTEST.Numbers

	CREATE TABLE PERFTEST.Numbers (n INT)

  ;WITH
    L0   AS (SELECT c FROM (SELECT 1 UNION ALL SELECT 1) AS D(c)),
    L1   AS (SELECT 1 AS c FROM L0 AS A CROSS JOIN L0 AS B),
    L2   AS (SELECT 1 AS c FROM L1 AS A CROSS JOIN L1 AS B),
    L3   AS (SELECT 1 AS c FROM L2 AS A CROSS JOIN L2 AS B),
    L4   AS (SELECT 1 AS c FROM L3 AS A CROSS JOIN L3 AS B),
    L5   AS (SELECT 1 AS c FROM L4 AS A CROSS JOIN L4 AS B),
    Nums AS (SELECT ROW_NUMBER() OVER(ORDER BY (SELECT NULL)) AS rownum
             FROM L5)
 -- INSERT INTO PERFTEST.Numbers
  SELECT TOP(@high - @low + 1) @low + rownum - 1 AS n
  FROM Nums
  ORDER BY rownum;